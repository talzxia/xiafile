*  学习GNU Emacs 
** Debr Cameron, Bill Rosenblatt &Eric Raymond 著
** 杨涛 杨蓝云 王建桥 等译
ＧＮＵ Emacs 是Emacs编辑器家庭中最受欢迎，传播范围最广，也是最强大和最灵活的UNIX文本编辑器，与其他文本编辑器的重要区别在于它是一个完备的工作环境。使用Emacs可以完成各种上学工作。本书循序渐进地讲述Emacs的入门知识，随着本书的深入，读者的Emacs使用水平将从初级（只会进行简单的文字编辑）提高到足以完成相当复杂的定制和程序设计任务的阶段。
本书对Emacs 19.30中的新增功能做了全面的介绍，内容涉及字体和颜色，下拉菜单、卷屏条、增强的Ｘ窗口系统支持，以及对大多数标准按键进行正确的绑定。此外，书中还对Emacs自带的新闻阅读器程序Gnus和文件传输协议的透明接口ange－ftp模式进行了介绍。
本书内容包括：
- 把Emacs 当做一个因特网工具箱来使用
- Emacs 丰富而又全面的在线帮助功能
- 如何使用Emacs来编辑文件
- 把Emacs当做一种“Shell环境”来使用
- 如何利用Emacs内建的排版功能
- 如何使用多个编辑缓冲区，多个Emacs窗口，多个Ｘ窗口
- 对Emacs进行定制
- Emacs到Ｘ窗口系统的接口
- 用宏来完成重复性工作的理由和方法
- 作为程序设计环境的Emacs
- Emacs LISP程序设计入门
- 如何获得Emacs
书中所附的速查卡列出了书中介绍的全部命令。
Emacs 是迄今为止功能最为强大的文本编辑器。它与其他大多数编辑器（特别是
UNIX操作系统的标准编辑器vi）的不同之处在于Emacs是一个完备的工作环境。
不管你做什么，都可以在清晨启动Emacs，然后一整天都用它来工作；可以用它
对文件进行编辑、重命名、删除和复制等操作；可以对程序进行编译；可以与
UNIX操作系统的shell进行交互式操作；可以阅读和组织电子邮件；可以访问因
特网等等。在Ｘ等窗口系统浒之前，人们通常把Emacs 单独当做一个完备的窗口
化系统来使用。只要有一台终端，就可以在Emacs环境里永不停息地工作。Emacs
还具备无穷的灵活性：你可以编写自己的命令，能够更改与Emacs命令关联的按
键；如果愿意花时间，可以用它做任何你想做的事情。
** 学习本书的目的
因为Emacs能够完成如此多的工作，所以人们普遍认为它是一种极其复杂的编辑
软件。到目前为止，已经出版的Emacs书籍大都是一些综合性的参考手册，不太
适合作为Emacs 初学者的入门教材。这正是我们编写本书的原因；教大家如何从
最基本的东西开始去熟悉和掌握Emacs。本书首先介绍Emacs的基础，然后过渡到
一些更高级的功能。
我们努力使本书最大限度地满足不同读者的学习需要：也许你是一位只想用
Emacs来写电子邮件演算和办公室留言的企业管理人员；也许是一位需要用Emacs
来撰写充满版式代码的复杂文档的职业作家；还可能是一位希望用Emacs来对源
代码进行排版的高级程序员。不管你想用Emacs做些什么，你都会发现它其实是
很容易学习和掌握的。只要有一两次实际使用经验，你就能够了解基本的文件编
辑方法。
在掌握了Emacs的基本用法之后，大家可以继续学到更高级的技巧。只有掌握了
它们，你才能真正体会到Emacs的妙处。这些高级技巧包括：
- 使用多个窗口和编辑缓冲区，以同时操作多个文件。
- 对键盘命令进行定制。
- 使用变量设计Emacs，使它适应用户个人的工作习惯。
- 使Emacs成为能够完成各种工作任务的工作环境，比如阅读电子邮件、编译程
  序和执行shell命令等。
- 创建宏编辑命令以快速完成重复性操作任务。
- 用Emacs支持多种程序设计语言（其中包括Ｃ、Ｃ＋＋、ＬＩＳＰ和ＦＯＲＴ
  ＲＡＮ）的编程工作。
- 利用各种标记语言（markup language)对文件进行排版。
- 利用Emacs的单词缩略功能，避免拼写过长的短语或者纠正常见的拼写错误。
- 利用Emacs访问因特网资源。
阅读本书需要满足一些最基本的要求。要对ＵＮＩＸ操作系统都有一个基本的了
解。具体来说，你必须知道文件和目录指的是什么，怎样给它们起名、对它们能
进行哪些基本操作（如复制、删除和重命名等）
** GNU Emacs 和自由软件基金会
使用Emacs编辑器并不意味着你必须了解它的发展史，但它的起源确实是整个计算
机史中不能不提的故事。负责维护和发行GNU Emacs的自由软件基本会（Free
software Foundation, FSF)已经成为计算机文化中一个非常重要的角色。
很久以前（1975)、Richard Stallman 在麻省理工学院编写出了第一个Emacs编
辑器。据说，最初的Emacs编辑器是TECO的一组宏编辑命令，这是一种很难学习
的行编辑器，目前已经退出了历史舞台。而“Emacs”这个名字的意思就是
“Editing Macros(编辑用宏命令）”。另外一种说法是“Emacs”起源于Richar
Stallman特别喜欢的某个冰激凌店的名字。1975年之后发生了许多事情。TECO逐
步vcpbm了人们的视野，而Emacs则被重新编写为一个独立的软件程序。 Emacs曾
经有过几个商业化版本，基本中最重要的是 Ｕnipress Emacs 和ＣＣＡEmacs。
曾有一段时间，在学术界以外你最有可能遇见的Emacs 编辑器就是这些商业化的
实现版本。
Stallman 的Emacs 在自由软件基金会（ＦＳＦ）和ＧＮＵ项目出现之后逐步占
据了主导地位。GNU是“GNU's Not UNIX(GNU 不是UNIX)”的首字母缩写，它指的
是一个由Stallman 及其伙伴们共同努力构建的完备的类UNIX操作系统。
Stallman 创建自由软件基金会的目的就是为了保证某些软件能够永保自由
(free)。这里所说的“自由”并不意味着廉价。你可能必须支付一笔软件发行成本
方面的费用，它的确切含义是指把人们从软件使用许可方面的限制条款中解放出
来。
为了理解“自由”这个词的含义，我们有必要先来看看软件通常是如何发行的。大
多数商业软件在发行时都带有一个限制性很强的许可证。你必须先支付费用才能
使用某个程序，你可能还得每年再交一些费用，在某些情况下，你甚至可能不得
不按分钟计算来支付使用费。这些许可证几乎百分之百地不允许你把有关程序赠
送给朋友，而且你几乎永远也得不到程序的源代码（除非你非常有钱）。如果某
个商业化程序出了问题或者它不具备你需要的功能，就只能等卖给程序的那家公
司的怜悯了，而那些公司极有可能根本不理睬你。
而GNU Emacs  则没有这样的限制条款。只要你能找到一个愿意把它送给你的人
，就可以完全免费地得到它。它在许多开放性的软件仓库站点都可以找到。由于
GNU Emacs 在发行时永远带着源代码，因此，如果你是一位程序员，就能给它添
加自己的功能，或者自行修补你发现的程序漏洞。你可以把副本赠送给你的朋友，
永远不会有人要求你支付使用费用。你唯一不能做的事情就是得自行增加GNU
Emacs在使用许可方面的限制条款。也就是说， 如果你向他人赠送了副本或者对
它进行了改进，你不能因此而开始收取所谓的许可费。GUN Emacs 是自由的，而
这种自由将永远保持下去。作为一名使用者，你的权利和责任都已经在通用公共
许可证（General Public License. GPL)里描述得非常全面和清楚了，该许可证
的具体内容请参考附录六。
创建自由软件基金会来发行软件程序的目的，是为了鼓励大家去共享而不是占有
软件。制定通用公共许可证的目的，是为了防止出现一种自私而又常见的行
为，即某个公司以公开软件代码为基础，在做了若干改进和纠错之后就宣称拥有
改进版本的版权而谋取利益。一旦有公司这样做了，从本质上讲，那个程序就将
成为一种私有财产而不再属于公用范畴。正是出于对这种行为的厌恶，Stallman
才创建了自由软件基金会这一组织。正如他在GNU宣言里所说的：“我不会在理智
的情况下签署一项保密合约，或者一份软件许可证合约－－因此，为了让自己能
够不在不名誉的情况下继续使用计算机，我必须做出“把足够多的自由软件集合
在一起”的决定。这样， 我就能够不依赖任何不自由的软件而继续生活和工作下
去。”在这份宣言中，Stallman还把软件的共享称为“程序员之间最基本的友谊行
为”。程序员编写出来的软件是自由的，因为它们可以共享并将永远是共享的，
而且这种共享不应该有任何附加的限制。ＦＳＦ软件不受限制性版权法律的约束，
那是Stallman 从根本上反对的做法。事实上，他专门造了一个词“ copyleft”来
描述ＦＳＦ的可共享软件在版权方面的基本观点。
自从GNU Emacs问世之后，GNU操作环境许多其他的组成部分也逐步到位，其中包
括：Ｃ和Ｃ＋＋编译器(gcc 和 g++),功能强大的调试器（gdb)，词法分析器lex
和语法分析器yacc的替代品（分别叫做flex和bison)，一个UNIX操作系统的
shell（bash、"Bourne-Again Shell”的缩写），以及许多其他程序和库。许多
已经存在的软件工具，比如源代码控制系统ＲＣＳ等，也纳入（FSF 的copyleft
版权规定中。ＦＳＦ基金会还发行一Linux版本（ Ｄebian Linux)。有了Linux
和ＧＮＵ 软件工具，拥有一个能够完全体现ＦＳＦ价值观的完备的操作环境就
成为可能。
** 学习Emacs 的方法
就像 Emacs有许多版本一样，它的用户群也各不相同。本书的目的使大家尽快进
入Emacs的大门。开篇的两章内容向大家介绍应该了解的基本概念，以后各章都
是建立在这些基本概念之上的。在学习完前两章之后，大家不必一定按顺序学习
其余各章的内容，你可以直接跳到自己感兴趣的主题上去。此外，本书尽量做到
深入浅出，你既可以仔细研读每一个细节，也可以快速查阅有关的命令清单和应
用示例。
** 你可以参考下面列出的阅读顺序进行学习：
如果                                      请阅读
你是一名系统管理员用户      前言、第一〜三章、第十六章
你是一名非专业用户              前言、第一〜三章、 第十六章
你是一位程序员                    前言、第〜五章、第十〜十二章
你是一位作家或专业人士       前言、第一〜四章、第八〜九章、第十六章
你想对Emacs进行定制           第十一章，也许还要再学习第十三章
你想在Emacs里使用电子邮件 第六章
你想在Emacs 里使用UNIX命令第五章
你想从Emacs里访问因特网 第六〜七章和第九章
上表给出的阅读顺序公供大家参考。 Emacs是一个庞大而又功能丰富的编辑器。
我们已经对它进行了分解以方便大家的学习的掌握，所以，你完全不必因它庞大
和丰富的功能而丧失信心。学习Emacs的最佳办法是蚂蚁啃骨头：先学会
最基本的编辑功能，其他功能可以等到你对它们有了兴趣、或者等到你想做什么
事情又不知该如何在Emacs里做的时候再去进一步学习。 Emacs很可能已经具
备你需要的功能，即使没有，你也可以通过编写LISP函数把它添加到Emacs里去
（具体细节请参考第十三章）。GNU Emacs的在线帮助系统是一个快速学习掌握
新功能的好地方。我们在第一章里对在线帮助的具体使用方法做了介绍、在第十
六章里又对它做了更深入的讨论。
** 下面列出了一些大家可能打算在闲暇时学习的功能： 
- 单词简写模式（第三章）
- 如何使用宏编辑命令（第十章）
- 如何把键盘上的功能键映射为Emacs命令（第十一章）
- 如何发出（和编辑）shell命令（第五章）
- 如何使用多个窗口（第四章）
- 如何在图形模式（Picture mode)里绘制简单的图形（第八章）
- 如何访问因特网（第七章）
- 如何发送电子邮件和阅读Usenet新闻（第六章）
** 最后，如果你坚持要从关到尾通读本书，那么请参阅下面对各章内容的简单介绍：
*** 第一章，Emacs的基本概念：介绍怎样启动Emacs和怎样对文件进行操作的方法。
这一章还对在线帮助系统做了一个简单的介绍。
*** 第二章，文件编辑：介绍Emacs的编辑操作，包括光标移动命令、广西的复制和
粘贴命令、撤销修改命令等。这一章还介绍了几种比较初级的定制方法，这将使
Emacs 按照你的设定的方式去完成工作。
*** 第三章，查找和替换操作：介绍了更多的编辑功能，包括查找和替换、单词的简
写模式、拼写检查等功能。
*** 第四章，使用编辑缓冲区和窗口：介绍多个编辑缓区、Emacs窗口和Ｘ窗口系统
的使用方法。这一章还介绍了在文件里插入书签以便日后检索定位的有关操作。
*** 第五章，Emacs工作环境：介绍能够在Emacs中的shell提示符下进行的各种操作。
比如，发出shell命令，对文件和目录进行操作，或者使用一些基本的时间管理
*** 第六章，电子邮件和Usenet 新闻：介绍用Emacs 发送、阅读和管理电子邮件的
方法。Gnus新闻阅读器使你能够在Emacs环境中完成对Usenet新闻组的访问。
*** 第七章，Emacs的因特网工具箱：介绍利用Emnacs编辑器远程访问其他计算机、
用其FTP功能检索文件及浏览成维网的方法。
*** 第八章，简单的文本排版和特效编辑：介绍Emacs中基本的文本排版操作（例如
段落缩进和居中等）和某些使用较少的专业化编辑功能（如图形模式和大纲模式
等）。
*** 第九章，用 Emacs设置排版标记：介绍Emacs对troff(及其相关软件）、Tex 、
ＬAtex和HTML等标记语言的支持功能。
*** 第十章，Emacs 中的宏：介绍利用宏编辑命令简化重复性工作的方法。
*** 第十一章，对Emacs进行定制：介绍根据个人喜好对Emacs进行定制的方法：定制
屏幕画面、定制键盘命令和编辑环境、加载Emacs扩展包以实现特殊功能等。
*** 第十二章，程序员的Emacs:介绍Emacs在程序设计环境方面的有关功能，包括对
Ｃ、LISP、FORTRAN和其他一些程序设计语言的编辑支持、还介绍了对编译器和
UNIX操作系统的make 工具的接口。
*** 第十三章，Emacs LISP  程序设计：介绍Emacs LISP的基本概念，这是一 种能
够对Emacs做进一步定制的程序设计语言。
*** 第十四章，Emacs编辑器和Ｘ窗口系统：介绍Emacs与Ｘ窗口系统的接口。如果你
使用的是一个图形工作站，这个接口将使你能够通过鼠标和弹出菜单来进行操作。
*** 第十五章， Emacs下的版本控制： 介绍对文件版本进行控制的ＶＣ模式。如果
你维护的某些程序或文档需要附带一个修订方面的历史记录，Emacs的版本控制
功能将大大简化这类操作。
*** 第十六章，在线帮助：介绍Emacs丰富而又易于使用的在线帮助功能。
*** 附录一，如何获得Emacs软件： 介绍获得GNU Emacs 和其他几种Emacs版本的方
法。
*** 附录二，解除他人对Emacs的定制设置：告诉大家如何解除他人对自己的Emacs进
行的定制设置，使它能够按这本书里所描述的那样运行和工作。
*** 附录三、Emacs变量：列出了许多重要的Emacs 变量，包括本书涉及到的全部变
量。
*** 附录四，Emacs LISP扩展包：列出了Emacs自带的几个最有用的LISP开发包。
*** 附录五，软件漏洞及其修补：介绍怎样（以及何时）提交在Emacs中发现的程序
*** 附录六，Emacs 的版权文件：给出通用公共许可证的完整内容，GNU Emacs就是
在这些规则下发行的。
附录七，请支持自由软件基金会：为了更多的推出高质量的软件，自由软件基金
会在不懈地奋斗着，而你也可以为此尽一份力量。请支持他们的工作。
*** 附录八，Emacs编辑命令速查表：对本书介绍的各种 Emacs重要命令的汇总。
*** 词汇表：对Emacs 术语的解释。
*** GNU Emacs  速查卡：最基本的Emacs编辑命令。

S-right 按住SHIFT的同时按下鼠标右键。
C-S-right 按住SHIFT 键和 CTRL键的同时按下鼠标右键。

到目前为止，还没有一本书能够把Emacs讲得面面俱到。Emacs远远超出了一个编
辑器的概念，它本身就是一个不断被开发的世界。它就像是你刚搬进去的一
dduusr居，你先按照自己的想法把它变成自己的家；再不断地添添改改，让它更
能折射出你的工作和生活方式。

** Ｅmacs简介

GUN Emacs 是目前UNIX世界里最为常用的广西编辑器。与vi(UNIX操作系统的标
准编辑器）或者其他内置在各种现代窗口系统里的编辑器相比，许多用户更喜欢
使用GNU Emacs。那么，它为什么这么流行呢？ Emacs并是不是市面上新新的编
辑工具，它也肯定不是最好的。但它却将是你可以找到的最在用的编辑工具。我
们期望这一章能够让大家对Emacs的基本概念有清楚的认识，从而帮助大家有效
地利用Emacs来完成自己的工作。 本书是针对Emacs用户而编写的一本指南。在
编写它的时候，我们就已经把“满足尽可能多的读者群的学习需要”当做我们的写
作目的之一，从需要撰写各种备忘录和报告的系统管理员及企业管理人员，到需
要使用多种程序设计语言编写源代码的程序员都在我们考虑的读者范围内。

Emacs  的确可以把许多事情都做得很好，不过人们并不是因为这一点才说它重
要的。Emacs的重要性体现在“它能把想做的许多事情都集成到一起来”这一点。

那么，所谓“集成”的意思又是什么呢？ 下面这个简单的例子就能说明问题。假
设有人给你发来一封电子邮件，向你介绍了一条访问新打印机的特殊命令。那么，
你可以先用Emacs来阅读这封电子邮件，然后试试这格新命令：从Emacs里启动一
个UNIX shell把新命令复制过去，再直接执行它。如果新命令很好用，人可以编
辑自己的.cshrc文件，给这条新命令创建一个假名（或者缩写）。在做这些事情
的时候，你根本用不着离开Emacs编辑器，也根本用不着重复输入那条命令。这
就是人们说Emacs功能强大的原因。它远不仅是一个文本编辑器、它是一个能够
改变你工作方式的完备的操作环境。

再提前给大家一个忠告：许多人认为Emacs是一种非常难以掌握的编辑器，但我
们不明白这有什么道理。Emacs的功能确实是非常之多，但这并不意味duhwq都必
须学会和使用这么多的功能。就任何一种文本编辑器而言，不管它是多么简单或
者多么复杂，其基本功能都应该是相同的。只要你能学会一种，就完全能够学会
它们当中的任何一种。虽说我们为帮助大家记住Emacs的各种命令而给出了一些
教条化的说明（比如“C-p代表把光标上移一行“），可我们并不认为这是必不可
少的。当然，这些助记说明确实能帮助大家越过初学阶段的拦路虎，但从长远看
并不会造成什么区别。学习使用编辑器其实就是学习手指的习惯性动作：学会在
想光标移动到上一行去的时候应该把手指放到什么地方。只要大家肯在Emacs里
练习，用不了多长时间你就能很快适应手指的这些习惯性动作了。而一旦你掌握
了这些习惯性动作，就永远也不会忘记它们，就像你永远不会忘记如何骑自行车
一样。在使用Emacs两天之后，我们就再也用不着想什么“Ｃ－Ｐ代表把光标上移
一行”这类的东西了。手指自己就知道该放到什么位置上去。到了这一阶段，你
就算入门了。也正是从这一阶段起，你将能更有创造性地使用Emacs来进行荼。
接下来就该考虑怎样才能计Emacs的高级功能为自己服务的事情了。由于Emacs城
有很多扩展菜单，所以新的鼠标点击式操作界面将使Emacs的使用更简便。不过，
即使你有鼠标，我们也建议你学习一些最常用命令的键盘操作。良好的手指习惯
动作无疑会使你成为一个打字快手；而把手指从键盘移到鼠标上去肯定会降低你
的打字速度，特别是在写作的时候。
学习手指习惯动作这种办法还暗示着本书不同的阅读方式。毫无疑问，读一遍书
肯定会学到很多东西，但你每天能够形成的新习惯却不可能太多，除非它们都是
些坏习惯。第二章将把大多数常用的基本编辑技巧介绍给大家。大家可能需要多
读几遍。每次学习都略有侧重。比如，Emacs有许多办法能够让你把光标向前移
动：你可以一次移动一个字符、一个单词、一行文本、一名话、一个段落和一张
打印页等等。这些技巧都将在第二章里进行介绍。先从前、后移动开始学起，再
逐步增加更复杂的命令。类似地，Emacs还提供了很多在文件里进行文本搜索的
办法，这经我们在其他编辑器里见过的要多很多。这些搜索操作都将在第三章里
讨论。你用不着一次把它们都学会，先学会几个，多做些练习，再去学习后面的
章节。即使你花了好几遍的功夫才能熟练掌握本书前三章所介绍的内容，也没有
人会笑话你。在培养好习惯方面多花点时间是值得的。

** 理解文件与编辑缓冲区
编辑器并不对某个文件本身进行编辑。事实上，它们会先把文件的内容放到一个
临时性的缓冲区里，然后再对缓冲区里的东西进行编辑。在通知编辑器保存缓冲
区的内容之前，存放在磁盘上的原始文件是不会发生任何改变的。记住：虽然缓
冲区的内容看起来与文件非常想像，但它只是一个临时性的工作区域，里面可能
包含的是文件的一份副本。
Emacs的编辑缓冲区和文件一样也有名字。缓冲区的名字通常就是正在编辑的文
件的名字，但也有例外的情况。有些缓冲区没有与它们关联的文件，比如说，＊
scratch*就是一个临时性的辅助性缓冲区，它的作用有点像草稿簿；而帮助功能
会把帮助信息显示在一个名为＊Help＊的缓冲区里，它也是一个与任何文件都没
有关联的缓冲区。不过我们此时还用不着为此操心 。就眼前来说，只要记住
Emacs会在开始编辑一个文件的时候，把该文件复制到一个缓冲区里去就行了。
编辑文件的时候，修改的是缓冲区而不是文件本身；可以等到把文本编辑得比较
满意时再去保存它们，而文件本身只有在你明确地选择了存盘操作时才会发生变
化。如果对自己的文本编辑工作不满意，可以在退出Emacs时选择不保存文件，
这样就不会影响到原始文件了。

** 编辑模式
Emacs有各种各样功能略有差异的编辑模式，而它灵活多能的声誉也部分来源于
此。“模式”一词听起来技术味很浓，好偈还挺复杂，其实它真正的含义不过是
Emacs对当前的文本编辑工作更“敏感”而已。当你在输入长篇大论的时候，通常
需要字换行（word wrap）等功能，这样你就不必在每一行的末尾按回车键了。
而当你进行程序设计的时候，就必须遵守程序设计语言在语句格式方面的规定。
对写作来说，Emacs 有文本模式（text mode）；对程序设计来说，Emacs与各种
程序设计语言对应的编辑模式，比如Ｃ语言模式（Ｃmode）。也就是说，编辑模
式将使Emacs成为能满足你不同工作任务要求的“专用”编辑器。
文本模式和Ｃ语言模式都是主模式（major mode）。一个编辑缓冲区每次只能处
于一种主模式、它们的作用，以及所在的有关章节。
表1-1 Emacs编辑器的主模式
模式 | 功能
--------+---------
基本模式（fundamentai mode）       | 默认模式，无特殊行为        |
文本模式（text mode）   书写文字材料（第二章）
邮件模式（mail mode）   书写电子邮件消息（第六章）
RMAIL模式（RMAIL mode）  阅读和组织邮件（第六章）
只读模式（ view mode)   查看文件，但不进行编辑（第五章）
shell 模式(shell mode)   在Ｅmacs里运行一个UNIX shell（第五章）
FTP 模式（ange-ftp mode)    下载或者查看远程系统上的文件（第七章）
Telnet 模式（telnet mode)  登录到远程系统（第七章）
大纲模式（outline mode)  书写大纲（第八章）
缩进文本模式（indented text mode) 自动缩进文本（第八章）
图形模式（picture mode) 绘制简单的线条图形（第八章）
nroff 模式（nroff mode)  按nroff的要求对文件进行排版（第九章）
ＴＥＸ模式（ＴＥＸ mode）  按ＴＥＸ的要求对文件进行排版（第九章）
Ｌetex 模式（latex mode)  按latex的要求对文件进行排版（第九章）
Ｃ模式（Ｃmode） 书写Ｃ语言程序（第十二章）
Ｃ＋＋模式（Ｃ＋＋ mode) 书写Ｃ＋＋程序（第十二章）
FORTRAN 模式（FORTRAN mode) 书写Ｃ＋＋FORTRAN 程序（第十二章）
Emacs LISP 模式（Emacs LISP mode) 书写Emacs LISP 函数（第十二章）
LISP 模式（LISP mode) 书写LISP 程序（第十二章）
LISP 互动模式（LISP interaction mode) 书写和求值LISP表达式（第十二章）

当编辑一个文件的时候，Ｅmacs 会根据正在进行的编辑工作尝试进行正确的主
模式。如果编辑一个以“.C”结尾的文件，它会转入Ｃ语言模式；如果编辑一个以
“.el”结尾的文件，它会转入lisp语言模式。有时候，Emacs 会根据文件的内容
而不仅仅是文件名来做出判断。如果编辑一个按ＴＥＸ格式排版的文件，它会转
入ＴＥＸ模式。如果它判断不出应该放到哪个编辑模式里，就会转入基本编辑模
式（fundamental mode），也就是最普通的编辑模式。

主模式之外还有一些副模式（minor mode）。副模式定义的是Emacs 某些特定的
行为，可以在某个主模式里打开或者关闭。比如，自动换行模式(auto-fill
mode)表示Emacs将对文本自动换行；当你输入一个长句子的时候，它会在适当的
位置自动插入一个换行符。表1-2列出了一些副模式和它们的作用，以及所在的
有关章节。

表1-2:Emacs 编辑器的副模式

模式                                                          功能
自动换行模式（ auto-fill mode)           开启字换行(word wrap)功能
（word wrap)功能（第二章）
改写模式（overwrite mode)    打字时替换而不是插入字符（第二章）
自动保存模式（auto-save mode)    把文件按一定周期自动保存到一个特殊的
临时文件里（第二章）
行号模式(line number mode)   在状态行上显示当前文本行的编号（第二章）
临界时标记模式(transient mark mode)  对被选取的文本区做高亮反显（第二
章）
缩略语词模式(abbrev mode)    允许使用单词的简写形式（第三章）
大纲模式(outline mode)  书写大纲（第八章）
ＶＣ模式（vc mode)  在Emacs 下使用各种版本控制系统

大家可能已经注意到，大纲模式既是一个主模式，又是一个副模式。这表示它既
可以作为一种主模式单独使用，也可以作为一种副模式用在其他主模式城。

Emacs还有其他一些没有列出的编辑模式，比如一些不常见的但很有意思的程序
设计语言（如scheme等）所对应的编辑模式等。还有一些模式是Emacs 自己使用
的，比如对应于目录编辑功能的Dired模式（这个模式在第五章里介绍）。

最后，如果你擅长LISP程序设计，还可以自行增加新的编辑模式。Emacs的可扩
展性似乎是无穷无尽的。 

** 启动Emacs
启动emacs的办法很简单，输入“Emacs“再加上要编辑（注1[fn:1])的文件名就行了。如果给出
的文件名不存在，Emacs将创建一个新的文件。你将看到类似于下面这样的画面：
输入一个文件名开始一次Emacs会话。如果给出的文件已经存在，Ｅmacs将读入
文件并把它显示在屏幕上。也可以省略文件名。如果只输入了“Ｅmacs”，屏幕上
将出现你所运行的Emacs的版本信息，如何启动在线帮助系统和其他一些提示性
信息。这些信息会在开始输入第一个字符的时候消失；而Emacs将把输入内容放
到一个名为＊scratch *空缓冲区里去，这是个试验各种练习的好地方。

** Emacs的编辑画面
CLOCK: [2016-06-19 Sun 09:58]--[2016-06-19 Sun 10:23] =>  0:25

进入Emacs 的时候，你将在屏幕上rhgcg个很大的工作区（一般是20多行），你
的编辑工作就将在这里进行（如图1-1所求）。一个光标将标识出你在文件里的
前后位置。这个光标也叫做“插入点”。Emacs老手们或或者Emacs的在线帮助系统
比较习惯于使用这个词，因此记住这个术语将会很有用。
开始工作不需要做什么特殊的操作在键盘上直接打字就行了。只要输入的是字母
/数字字符的位置，它会随着打字动作而移动。Emacs并没有为插入文本和输入命
令分别准备编辑模式这是它与许多编辑器（特殊是vi）的一个不同之处。现在就
来输入些东西试试，你将发现Emacs是很容易用不用的。（万一遇到了麻烦，请
按C-g组合键）。
在屏幕的底部（倒数第2行），Emacs会给出一大堆当前工作情况的wyth.p一行叫
做“状态行”。状态行靠左边的地方可能会有两个星号（**）。这两个星号的作用
是表明正在编辑的拓上次存盘之后又被修改过。如果没有做过任何个性那里就不
会出现两个星号。接下来，Emacs 显示“Emacs”和正在编辑的缓冲区的名称
（myfile）。接下来的圆括号里给出当前所处的编辑模式（编辑模式在本章前面
刚刚讲过）。在它的后面，Emacs给出在文件的前后位置：那一行（图中的“L1”
表示是第1行（和相对文件其余部分所处的位置。如果是文件的开头，Emacs给出
单词“Top ”；如果是文件的末尾，Emacs给出 “Bow”；如果是文件中间，它会给
出个百分数（比如“50%”表示现在看到的文件中部的内容）；如果整个文件都显
示在屏幕上，Emacs将给出单词“all”。
一个熟练的Emacs用户经常会同时打开多个缓冲区进行工作。如果是这种情况，
则每个缓冲区都有一个描述其工作情况的状态行就行了。

屏幕画面最底部、状态行的下面是辅助输入区（minibuffer）。Emacs这个辅助
性的输入区有许多用途比如，Emacs会把发出命令的执行结果回显在这里在此输
入文件名让Emacs去查找，搜索和替换所使用的值也要输入在这里等等。Emacs的
出错信息也将显示在这个辅助输入区里。如果我困在辅助输入区里出不来了，请
再次按下c-g组合键。

X技巧：X窗口系统下的Emacs画面

X窗口系统下的emacs屏显画面与它在字符终端上的显示效果看起来稍微有些不同。
每个Emacs窗口都有一个标题，它通常是“Emacs@systemname”。但这并不是一成
不变的；如果在一次Emacs会话里使用了多个X窗口，窗口的标题就会出现一些变
化，具体情况我们将在第四章里介绍。在画面的右边是一个卷屏条，它能真难地
反映出在文件中的位置，基作用与状态条上的百分比差不多。还可以利用卷屏条
在文件中前后移动。图1-2给出了Emacs一个规范性的X窗口。
** Emacs命令
我们马上就要开始学习一些Emacs命令了，所以，我们现在先来对它们做一个基
本介绍。怎样才能发出命令呢？每个命令都有一个正式的名字它们（如果你刨根
问底儿的话）实际上是Emacs内部LISP例程的名字。这些名字一般都比较长，大
多数人都不太喜欢输入完整的名称。所以，我们需要一些能够简化命令输入的办
法。
Emacs把一个命令名与一个以ctrl 或Esc打头的组合键关联起来。命令与组合键
之间的这种联系被称为“绑定”。在X窗口系统环境里，Emacs会把一些命令与鼠标
动作绑定在一起。

Emacs的创作者们已经尽量把最常用的命令与手指最容易触到的组合键绑定在了
一起。大家将会遇到的各种组合键如下所求：
- 最常用的命令（比如那些光标移动驗主）都被绑定为“C-n”（n可以是做生意字
  符）的形式。“C-n”组合键的输入方法是：按住Ctrl键，再按下“n”键，然后释
  放这两个键。
- 次常用的命令被绑定为“ESC n”的形式，而n可以是做生意字符。“ESC n”的输
  入方法是：按下ESC键，释放它，再按下“n”键（注2[fn:2])
- 其他常用命令被绑定为“C-x something”（即C-x后面再加上一些东西--可能是
  一个或者多个字符，也可能是另外一个控制组合）的形式。在大家将要并不能
  的各种命令中，文件操作类命令通常被绑定为“C-x something ”的形式。
- 某些特殊命令被绑定为“C-c something ”的形式。这类命令通常都与某些特殊
  的编辑模式有关---比如图形模式或邮件模式等。对这类命令的介绍将出现在
  本书比较靠后的部分。
* Footnotes

[fn:2] 注2 ：Emacs文档和在线帮助功能里说的都是META键，它的简化形式是大写
的字母“M”就各种实际应用目的而言，META键与ESC键是完全等价的。这个按键在
大多数键盘上都不存在（或者被隐藏起来了），所以本书用ESC键来代替它。如
果你的键盘上确实有一个META键那么它与ESC键还是有一点很重要的区别的。如
果你准备发出一连串的ESC命令就必须在每一个命令的前面按下ESC鍵而如果你有
个META键，那么你就可以按住META键来输入寻一连串的命令。从这方面看，META
键与Ctrl键有一定的相似之处。在Sun工作站上，空格键左右两端的按键就是
META键。在某些键盘上，Alt键与META键作用相同。

[fn:1] 注1：这个命令的名字在不同的计算机上可能会有所不同。GNU Emacs 有
时候被叫做 gnumacs或gmacs，在安装有多种编辑器的站点上经常会出现这样的
情况。也许你还得修改自己UNIX操作系统的搜索路径。如果你在输入“emacs”、
“gnumacs”或者“gmacs”的时候出现一条“Command not Found（命令示找到）”错
误信息，请向你的系统管理员求助。


