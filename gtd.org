用 Org-mode 实现 GTD
有了 Org-mode 强大的傻管理功能，再配合其他一些 Emacs 插件，可以很容易实现个人时间管
理（GTD）。如果不了解 GTD，
http://www.cnblogs.com/holbrook/archive/2012/02/09/GTD.html 这里 可以让你在两钟内
对 GTD 有一个初步认识。
* 如何进行 GTD
如 GTD 精要 http://www.cnblogs.com/holbrook/archive/2012/02/09/GTD.html 所述，GTD
包括收集、整理、组织、回顾、执行等环节。各个环节都需要工具的支持：
** 1.1 收集
任何需要关注的事件，如 mail，电话，口头交流，网页，文档，想法等，都有可能产生新的
任务。收集一节要把这些需要关注的事件都记录下来。
所以需要一个收集箱（Inbox），能够随时快速启用，记录需要的信息。
** 1.2 整理
在合适的时间梳理收件箱中的信息抛弃掉没用的垃圾和暂时不用考虑的参考信息，剩下的就
是需要关注的任务。整理阶段的三种处理方式是：
既不需要处理又无保留价值的信息，直接舍弃
不需要处理但有保留价值的信息，归档留存
比如，一篇有用的资料，以后可能会用到，需要归档已备查阅；一个很好的想法但由于时间、
前提条件、考虑程度等因素不能马上投入行动，需要记录下来等等。

需要处理的便信息，创建一个 wttl
根据以上三种情况，整理阶段需要实现：

删除无用的信息
将信息归档
创建任务
** 1.3 组织

创建任务时，要有一个快速的判断，包括 what（做什么），who（谁来做），when（什么时
候做），where（什么地点处理），why（为什么要做，可以用原始消息作为原因），
how（如何做），how much（需要多长时间）。这个判断要非常迅速，并根据判断的结果对
傻进行组织，以便后来的处理和查询，通常按照可以这样的步骤分析：

1.该任务是否属于一个项目？ 如果是，首先打上项目标记
2.该任务能否在 2 分钟内完成？ 如果是，马上处理，然后将任务标记为“已完成”
3.根据重要性和紧迫性，为该任务划分优先级
4.该任务是否需要别人处理？如果是，通知对方，然后将任务标记为“等待中”
5.需要自己处理的任务，马上判断处理的地点/场合，并标记
6.对于能够确定时间的任务（日程安排），标记计划处理时间，如果有截止日期，也标记上

根据上述步骤，组织阶段需要的功能包括：

将任务归入不同的工作清单
为任务增加标记
定义任务的完成状态
为任务定义优先级
为任务设定时间点

1.4 回顾

在合适的时机检查所有的任务，根据实际情况进行处理。建议的做法包括：

每日回顾 每天早上先查看当日的日程表，然后检查待办任务清单，根据实际情况和当日的
时间安排，以及当日的行程（地点），决定一天的工作计划。
周期性回顾 可以是每周，每月或更长的时间周期。回顾一段时间内所完成的事情，做出总
结；同时根据实际情况的变化，调整下一阶段的计划。
项目回顾 项目是一系列任务的组合，并且任务之间存在依赖关系。根据项目的时间点，在
适当的时机回顾整个项目的相关任务，进行总结或计划。

可以遵循“六个高度检视法”：

5 万英尺+：人生目的的价值观（面临重大变化和转折时）
4 万英尺：3~5 年的展望（建议每年检视）
3 万英尺：1~2 年的目标（建议每季检视）
2 万英尺：责任范围（建议每月检视）
1 万英尺：当前的项目（建议每周检视）
跑道：下一步行动（建议每日检视）

前 3 个较低层次的内容大多是针对事物当前状态（行动、项目、职责），再向上的层次则主
要涉及指导方向、目标取向等方面，需要在恰当的时机去关注需要关注的方面，长远规划，
掌控愿景，保持全方位的平衡。

回顾阶段需要：

按时间段检索任务
按项目检索任务
处理任务间的依赖关系 

1.5 执行等环节

根据情境是否合适、时间是否够用、精力是否充沛、任务是否重要四个原则来决定要进行哪
项任务。因为经过前面的步骤已经周密严谨系统地考量过各项任务，所以此时只要用直觉判
断即可。可以参考“四象限法则”：
1. 给出任务的定性：重要/不重要，紧急/不紧急
2. 按照“先轻重，再缓急”的原则，将任务按照“重要且紧急-重要不紧急-不重要但紧急-
   不重要-不紧急”的顺序排序
3. 对于划分到同一类型的任务，人为区分“高、中、低”的优先级
4. 处理原则：
   重要且紧急：尽早动手，缓解压力
   重要不紧急：尽早计划，逐步完成
   不重要但紧急：寻求帮助，设定截止时间
   不重要不紧急：冷却处理

每完成一项任务，就将该任务标记为“已完成”，并归档。

为了帮助判断，需要支持任务的筛选、搜索和排序。
2 用 Org-mode 实现 GTD

前面已经列出了 GTD 工具应该具备的功能，用 Org-mode 可以很好地实现这些功能，从而将
Org-mode 当做 GTD 工具。
2.1 文件的划分 

Org-mode 管理的基本单位是文件，尽管可以将所有的任务放到同一个文件中，但这样不利
于管理，所以要首先规划文件的划分。

根据自己的需要，设计了 6 个文件：

inbox 收件箱，用于收集未整理的信息
task 待办事项，记录所有未完成的事项。但不包括项目内容。
Tasks 任务
没有时间点的事项为“待办事项”
有时间点的待办事项为“日程安排”
有时间间隔的待办事项为“周期性任务”
Ideas 想法
finished 完成的任务会迁移到这里
Tasks 完成的任务
Journal 日志，按照时间范围组织结构，可以将完成的任务转移到这里
note 笔记，临时存储一些以后可能会用到的资料。note 会逐步转移到真正的笔记本中
trash,回收站，取消的任务，不需要的信息和资料等迁移到这里，等待删除，按类型区分 
Tasks
Ideas
Notes
Project,项目专门收集单独的，项目相关的事项。完成的项目实现不会迁移到 finished 中，
项目日志和总结等都在这个文件中完成
每个项目一条，以项目名称/简称作为标签
统一的标签：Proj
2.2 任务状态
| 状态（快捷键）                          | 完成状态                   | 说明                                                        | 回顾周期 |
|-----------------------------------------+----------------------------+-------------------------------------------------------------+----------|
| 无状态表示尚未开始整理，一般位于  Inbox |                            |                                                             |          |
|-----------------------------------------+----------------------------+-------------------------------------------------------------+----------|
| TODO(t)                                 | 最基本的任务状态           |                                                             |          |
| NEXT(n)                                 | 下一步行动，还末开始计划   |                                                             |          |
| SOMEDAY(s)                              | 想法，还没决定是否开始行动 |                                                             |          |
| DONE(d)                                 | 是                         | 已经完成，需要记录完成时间和备注说明，转移到 finished.org   |          |
| ABORT(a)                                | 是                         | 取消的任务，需要说明取消原因，转移到 trash.org 的相应节点中 |          |
| WAITING (w)                             | 等待其他人完成             |                                                             |          |
  

任务状态在多个文件中都会使用，所以要在.emacs 中定义（而不是单个.org 文件中）

(setq org-todo-keywords '((sequence "TODO(t!)" "NEXT(n)" "WAITING(w)"
"SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")))

2.3 标签设计

1. 情境标签，表明该任务应该在何种环境下完成
   - @Office 办公室
   - Home 在家
   - Computer 在有计算机的时候
   - Call 打电话
   - Way 在路上或外出
   - Lunchtime 午休时间
2. 分类标签
所有的项目具有标签“project"
其他的分类自行定义

2.4 TODO 属性设计

2.5 初始化文件

为了使上面的设计能够生效，对于有些文件需要进行初始化，增加配置信息。还可以包含一
些例子。

tsak.orga
#+STARTUP:showall
#+STARTUP:hidestars
#+TAGS: { @Office(o) @Home(h) @Computer(c) @Call(c) @Way(w) @Lunchtime(l)}
#+TAGS

finished.org 

#+STARTUP: hidestars

project.org

#+STARTUP: showall
#+STARTUP: hidestars
#+FILETAGS: proj 
#+COLUMNS: %38ITEM(Details) $TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}

2.6 定义转接（Refiling）

使用文件管理 GTD，一定会需要将标题从一个节点移动到另一个节点。
org-mode 提供的 C-c C-w 可以方便地在同一文件内移动节点。
对于不同文件之间和移动，也可以通过配置来实现快速移动，下面是一个例子：
（org-refile-targets (quote(("newgtd.org" :maxlevel . 1 )("sommeday.org": level
. 2))))
通过这样的设定，可以表示出【someday.org】文件中第二阶层的标题和【newgtd.org】文
件中第一阶层的标题。
3 使用场景

3.1 快速收集信息

GTD 工具通常会定义一个 Inbox，用于快速记录想法、任务。万能的 Inbox 工具是纸秋笔，之
前我也尝试过 gmial.EverNot 和 doit.im，但都感觉不够敏捷。而 Emacs 下的
org-mode+remmber-mode 能够满足我的要求。

最新版的 org(>6.36)集成了 remember.el，可以快速捕获信息通过预定义的模板进行分类，
并能够保存相关的附件。

尽量使用 Emacs 完成更多的功能有利于收集（www,mail,im,read）

3.1.1 快速启动

在 Emacs 中使用命令 M-x org-remmber，会打开一个新的 buffer，输入一些内容之后输入命令
C-c C-c，就会将内容保存到文件中（默认是~/.notes）。如果查看~/.notes 文件，会看到
类似下面的内容 ：
 ** Mon Aro 16 10:32:38 2012(使用 org-remmber 创建）使用 org-remmber 创建
/home/******/orgmode3-gtd.org ** Mon Apr 16 10:34:41 2012(另一个测试） 另一个测
试/home/*****/tmp

org-remmber 会自动他妈一些条目，包括时间，输入的注释内容以及当时 Emacs 打开的文件名。
尽管这样比手工打开一个文件并输入一些内容要迅速许多，但我们还可以做到更快：

可以定义 org-remmber 命令的快捷键，比如 C-c c(这个快捷键应该是 org 菜单中最快捷的）：

(define-key global-map "\C-cc" 'org-remmber)

如果不习惯一直开着 Emacs 并且觉得 Emacs 打开太慢，还可以使用 Emacs 的 Server/Client 模式。
$emacsclient -e "(remmber-other-frame)"

3.1.2 模板定义

org-remmber 支持模板，可以通过快捷键选择事件的类型，生成特定格式的记录，并插入到
指定容器的指定位置。其格式是：（名称，快捷键，内容模板，文件，父节点）

我的事件定义如下：

| 事件（快捷键） | 容器        | 模板                                               |
|----------------+-------------+----------------------------------------------------|
| New(n)         | inbox.org   | 收件箱，收集未整理的信息                           |
| Task(t)        | task.org    | 待办事项，所有末完成的事情                         |
| Calendar(c)    | task.org    | 日程安排，具有明确时间的待办实现，可以是周期性任务 |
| Idea(i)        | task.org    | 想法，愿望                                         |
| Note(r)        | note.org    | 笔记，最终会被移到真正的笔记本                     |
| Project(p)     | project.org | 项目任务                                           |
|                |             |                                                    |
|----------------+-------------+----------------------------------------------------|

对应的模板配置：

(org-remmber-insinuate)
(setq org-directory "~、Documents/Dropbox/0.GTD/")
(setq org-remember-templates '(("New" ?n "*%?%t\n%\n%a"
"~/Documents/Dropbox/0.GTD/inbox.org)
("Task" ?t "** TODO %?\n %i\n%a" "~/Documents/Dropbox/0.GTD/task.org" "tasks")
("Calendar" ?c"** TODO %?\n %i\n %a" "~/Documents/Dropbox/0.GTD/task.org"
"task")
("Idea" ?i "** %?\n %i\n %a" " ~/Documents/Dropbox/0.GTD/note.org")
("Project" ?p "** %?\n %i\n %a" "~/Documents/Dropbox/0.GTD/project.org" %9)))
(setq org-default-notes-file(concat org-directory "/inbox.org)

使用模板参数能带来很多便捷。比如上面的 Project 模板，在收集的时候能够根据选择的项
目名称，自动将任务插入到对应项目的条目下面。

常用的模板元素：

| 元素 | 说明                   |
|------+------------------------|
| %?   | 输入文字               |
| \n   | 插入换行符             |
| %i   | 插入选择区域           |
| %a   | 当前光标所在标题的链接 |
| %t   | 插入日期               |
| %T   | 插入日期和时间         |
| %g   | 从目标窗口的标签中选择 |
| %G   | 从全局标签中选择       |
| %t   | 输入日期时间           |
|------+------------------------|

模板的详细说明可能参考这里
http://orgmode.org/manual/Capture-templates.html#Capture-templates

3.2 TODO 查看日程表

在 Emacs 配置文件.emacs 定义日程表快捷键：

(define-key global-map "\C-ca" 'org-adenda)

C-c[将当前文件加入日程表，C-c a a 本周事件 t 显示所有事件 m 查询标签 L 当前缓冲
区时间线 s 查询关键词 T 查询带 TODO 关键词的项 M 查询带 TODO 关键词的标签 q 退出日程
表

可以将多个 org 文件从日程表加入、移除，或者将日程表锁定在当前 org 文件的某个分支：
C-c [将当前文件加入日程表。如果已加入，移动到前面
C-c ] 将当前文件从日程表中移除
C-c C-x < 锁定到当前树（只显示当前树的事件）
C-c C-x >解除锁定
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2016-07-20 Wed 06:04]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:

4 扩展

4.1 同步

由于前面已经将 GTD 文件目录设置在 Dropbox 目录下，所以可以自动实现同步，包括
pc,mac,mobile。

iOS 和 Android 上面都有 Mobileorg，移动设备上的 GTD 也就解决了。

** GTD 精要 http://www.cnblogs.com/holbrook/archive/2012/02/09/GTD.html
前年写的，居然一直躺在草稿箱里。尴尬今天把它放出来。。。

 

GTD(Getting Things Done) 是一种将繁重超负荷的工作生活方式变成无压力高效的时间管理系统（David Allen， 《Getting Things Done-The Art of Stress-Free Productivity》。其核心是把所有要做的事情都记录下来，然后整理组织，并逐一执行。也就是收集、整理、组织、回顾、执行五个过程，如下图：
[[/Users/mac/Documents/gtd1.png]]


收集：把接收到的各种事件集中在一起；

整理：对事件做出快速判断，决定直接抛弃、留存归档或是产生一个任务；

组织：根据任务的不同属性将其归入不同的工作清单；

回顾：定期检查工作清单，如果条件成熟就进行处理；

执行：对于可以处理的任务进行处理，并归档。

GTD 的核心理念概括一句话，就是：你必须记录下来你要做的事，然后整理，并安排自己去逐一执行。
[[/Users/mac/Documents/gtd2.png]]
 

整理和组织
一个交易系统，如果存储了大量的历史信息，就会负担过重，甚至无法有效处理新的交易。同样，如果大脑中存放了大量的“杂事”，不但会增加焦虑感，甚至会排挤掉真正有意义的思考，徒然损耗精力。清空大脑，可让人气定神闲，总是处于一切就绪的状态，从容高效的提升决策的品质和做事的效率。所以需要把每一个悬而未决的杂事都从大脑中拿出来，存储在外部的收集系统。

但是仅仅收集还不够，如果这些事情没有安排妥当，还是会让人感觉不安。当杂事收集到一定程度是，要对其进行整理。抛弃掉没用的垃圾和暂时不用考虑的参考信息，剩下的就是需要关注的任务。对于收集到的杂事，应该定期整理以便尽量控制其数量，最好达到清空的状态。在整理的时候，要做到以下两点：

▪ 从头到尾：平等对待所有杂事，逐一处理，不避不拖。 
▪ 一次一事：专注于每一件杂事，心无旁骛的判断当前杂事的实质，不要同时考虑下一件。

进一步，可以快速判断这个任务的特征：是否可以在 2 分钟内解决？如果可以就马上解决掉。如果不能，还需要进一步判断任务的重要程度，谁来做，什么时候做，在哪里做，并根据这些特征将任务分配到不同的工作列表。最后，如果这个任务属于一个很多任务组成的“项目”，还需要为其打上该项目的标签。

大概 80%以上的任务都可以如上略作思考就可得知下一步行动，15%的项目只要简单的借助辅助手段（如 MindMap 等工具）稍加记录即可，只有 5%重大复杂的项目任务需要通盘筹算。

 

在 GTD 的方法框架下，可以根据自己的需要；灵活定义处理流程。下图是我自己的处理流程：



这里面最重要的就是工作清单。在初步处理后，收纳在工作清单里面往往是重要的、需要集中精力思考的事情。所以任务纳入工作清单时，一定要遵循几个原则：

整理和组织可以同步进行，也可以分别进行。在分别进行时，可以将任务暂时标记为“Next（下一步）”状态，便于以后进行任务组织时查询。

 

回顾和执行
至此，所有的任务已经安排好了，

